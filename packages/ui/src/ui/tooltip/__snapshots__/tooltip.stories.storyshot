// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots UI/Tooltip darkMode:false 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "64px",
              "width": "100%",
            }
          }
        >
          <Tooltip
            as="span"
            className=""
            containerRef={null}
            darkMode={false}
            title="View job #100"
          >
            <h>
              <TooltipProviderProvider
                delayDuration={700}
                isOpenDelayed={true}
                onTooltipClose={[Function]}
                onTooltipOpen={[Function]}
              >
                <R
                  delayDuration={200}
                >
                  <h
                    __scopePopper={
                      Object {
                        "Popper": Array [
                          Object {
                            "$$typeof": Symbol(react.context),
                            "Consumer": Object {
                              "$$typeof": Symbol(react.context),
                              "_calculateChangedBits": null,
                              "_context": [Circular],
                            },
                            "Provider": Object {
                              "$$typeof": Symbol(react.provider),
                              "_context": [Circular],
                            },
                            "_calculateChangedBits": null,
                            "_currentRenderer": Object {},
                            "_currentRenderer2": null,
                            "_currentValue": undefined,
                            "_currentValue2": undefined,
                            "_threadCount": 0,
                          },
                          Object {
                            "$$typeof": Symbol(react.context),
                            "Consumer": Object {
                              "$$typeof": Symbol(react.context),
                              "_calculateChangedBits": null,
                              "_context": [Circular],
                            },
                            "Provider": Object {
                              "$$typeof": Symbol(react.provider),
                              "_context": [Circular],
                            },
                            "_calculateChangedBits": null,
                            "_currentRenderer": null,
                            "_currentRenderer2": null,
                            "_currentValue": undefined,
                            "_currentValue2": undefined,
                            "_threadCount": 0,
                          },
                        ],
                      }
                    }
                  >
                    <PopperProvider
                      anchor={
                        <span
                          class="root"
                          data-state="closed"
                        >
                          Job #100
                        </span>
                      }
                      onAnchorChange={[Function]}
                      scope={
                        Object {
                          "Popper": Array [
                            Object {
                              "$$typeof": Symbol(react.context),
                              "Consumer": Object {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": Object {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": Object {},
                              "_currentRenderer2": null,
                              "_currentValue": undefined,
                              "_currentValue2": undefined,
                              "_threadCount": 0,
                            },
                            Object {
                              "$$typeof": Symbol(react.context),
                              "Consumer": Object {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": Object {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": null,
                              "_currentRenderer2": null,
                              "_currentValue": undefined,
                              "_currentValue2": undefined,
                              "_threadCount": 0,
                            },
                          ],
                        }
                      }
                    >
                      <TooltipProvider
                        contentId="radix-40"
                        onClose={[Function]}
                        onFocus={[Function]}
                        onOpen={[Function]}
                        onTriggerChange={[Function]}
                        open={false}
                        stateAttribute="closed"
                        trigger={
                          <span
                            class="root"
                            data-state="closed"
                          >
                            Job #100
                          </span>
                        }
                      >
                        <ForwardRef
                          asChild={true}
                        >
                          <ForwardRef
                            __scopePopper={
                              Object {
                                "Popper": Array [
                                  Object {
                                    "$$typeof": Symbol(react.context),
                                    "Consumer": Object {
                                      "$$typeof": Symbol(react.context),
                                      "_calculateChangedBits": null,
                                      "_context": [Circular],
                                    },
                                    "Provider": Object {
                                      "$$typeof": Symbol(react.provider),
                                      "_context": [Circular],
                                    },
                                    "_calculateChangedBits": null,
                                    "_currentRenderer": Object {},
                                    "_currentRenderer2": null,
                                    "_currentValue": undefined,
                                    "_currentValue2": undefined,
                                    "_threadCount": 0,
                                  },
                                  Object {
                                    "$$typeof": Symbol(react.context),
                                    "Consumer": Object {
                                      "$$typeof": Symbol(react.context),
                                      "_calculateChangedBits": null,
                                      "_context": [Circular],
                                    },
                                    "Provider": Object {
                                      "$$typeof": Symbol(react.provider),
                                      "_context": [Circular],
                                    },
                                    "_calculateChangedBits": null,
                                    "_currentRenderer": null,
                                    "_currentRenderer2": null,
                                    "_currentValue": undefined,
                                    "_currentValue2": undefined,
                                    "_threadCount": 0,
                                  },
                                ],
                              }
                            }
                            asChild={true}
                          >
                            <ForwardRef
                              asChild={true}
                            >
                              <Slot>
                                <SlotClone>
                                  <ForwardRef
                                    asChild={true}
                                    data-state="closed"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <Slot
                                      data-state="closed"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                    >
                                      <SlotClone
                                        data-state="closed"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <span
                                          className="root"
                                          data-state="closed"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseDown={[Function]}
                                          onMouseLeave={[Function]}
                                          onMouseOver={[Function]}
                                        >
                                          Job #100
                                        </span>
                                      </SlotClone>
                                    </Slot>
                                  </ForwardRef>
                                </SlotClone>
                              </Slot>
                            </ForwardRef>
                          </ForwardRef>
                        </ForwardRef>
                        <ForwardRef
                          className="tooltip"
                        >
                          <Presence
                            present={false}
                          />
                        </ForwardRef>
                      </TooltipProvider>
                    </PopperProvider>
                  </h>
                </R>
              </TooltipProviderProvider>
            </h>
          </Tooltip>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;

exports[`Storyshots UI/Tooltip default 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "64px",
              "width": "100%",
            }
          }
        >
          <Tooltip
            as="span"
            className=""
            containerRef={null}
            darkMode={true}
            title="View job #100"
          >
            <h>
              <TooltipProviderProvider
                delayDuration={700}
                isOpenDelayed={true}
                onTooltipClose={[Function]}
                onTooltipOpen={[Function]}
              >
                <R
                  delayDuration={200}
                >
                  <h
                    __scopePopper={
                      Object {
                        "Popper": Array [
                          Object {
                            "$$typeof": Symbol(react.context),
                            "Consumer": Object {
                              "$$typeof": Symbol(react.context),
                              "_calculateChangedBits": null,
                              "_context": [Circular],
                            },
                            "Provider": Object {
                              "$$typeof": Symbol(react.provider),
                              "_context": [Circular],
                            },
                            "_calculateChangedBits": null,
                            "_currentRenderer": Object {},
                            "_currentRenderer2": null,
                            "_currentValue": undefined,
                            "_currentValue2": undefined,
                            "_threadCount": 0,
                          },
                          Object {
                            "$$typeof": Symbol(react.context),
                            "Consumer": Object {
                              "$$typeof": Symbol(react.context),
                              "_calculateChangedBits": null,
                              "_context": [Circular],
                            },
                            "Provider": Object {
                              "$$typeof": Symbol(react.provider),
                              "_context": [Circular],
                            },
                            "_calculateChangedBits": null,
                            "_currentRenderer": null,
                            "_currentRenderer2": null,
                            "_currentValue": undefined,
                            "_currentValue2": undefined,
                            "_threadCount": 0,
                          },
                        ],
                      }
                    }
                  >
                    <PopperProvider
                      anchor={
                        <span
                          class="root"
                          data-state="closed"
                        >
                          Job #100
                        </span>
                      }
                      onAnchorChange={[Function]}
                      scope={
                        Object {
                          "Popper": Array [
                            Object {
                              "$$typeof": Symbol(react.context),
                              "Consumer": Object {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": Object {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": Object {},
                              "_currentRenderer2": null,
                              "_currentValue": undefined,
                              "_currentValue2": undefined,
                              "_threadCount": 0,
                            },
                            Object {
                              "$$typeof": Symbol(react.context),
                              "Consumer": Object {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": Object {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": null,
                              "_currentRenderer2": null,
                              "_currentValue": undefined,
                              "_currentValue2": undefined,
                              "_threadCount": 0,
                            },
                          ],
                        }
                      }
                    >
                      <TooltipProvider
                        contentId="radix-39"
                        onClose={[Function]}
                        onFocus={[Function]}
                        onOpen={[Function]}
                        onTriggerChange={[Function]}
                        open={false}
                        stateAttribute="closed"
                        trigger={
                          <span
                            class="root"
                            data-state="closed"
                          >
                            Job #100
                          </span>
                        }
                      >
                        <ForwardRef
                          asChild={true}
                        >
                          <ForwardRef
                            __scopePopper={
                              Object {
                                "Popper": Array [
                                  Object {
                                    "$$typeof": Symbol(react.context),
                                    "Consumer": Object {
                                      "$$typeof": Symbol(react.context),
                                      "_calculateChangedBits": null,
                                      "_context": [Circular],
                                    },
                                    "Provider": Object {
                                      "$$typeof": Symbol(react.provider),
                                      "_context": [Circular],
                                    },
                                    "_calculateChangedBits": null,
                                    "_currentRenderer": Object {},
                                    "_currentRenderer2": null,
                                    "_currentValue": undefined,
                                    "_currentValue2": undefined,
                                    "_threadCount": 0,
                                  },
                                  Object {
                                    "$$typeof": Symbol(react.context),
                                    "Consumer": Object {
                                      "$$typeof": Symbol(react.context),
                                      "_calculateChangedBits": null,
                                      "_context": [Circular],
                                    },
                                    "Provider": Object {
                                      "$$typeof": Symbol(react.provider),
                                      "_context": [Circular],
                                    },
                                    "_calculateChangedBits": null,
                                    "_currentRenderer": null,
                                    "_currentRenderer2": null,
                                    "_currentValue": undefined,
                                    "_currentValue2": undefined,
                                    "_threadCount": 0,
                                  },
                                ],
                              }
                            }
                            asChild={true}
                          >
                            <ForwardRef
                              asChild={true}
                            >
                              <Slot>
                                <SlotClone>
                                  <ForwardRef
                                    asChild={true}
                                    data-state="closed"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <Slot
                                      data-state="closed"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                    >
                                      <SlotClone
                                        data-state="closed"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseOver={[Function]}
                                      >
                                        <span
                                          className="root"
                                          data-state="closed"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseDown={[Function]}
                                          onMouseLeave={[Function]}
                                          onMouseOver={[Function]}
                                        >
                                          Job #100
                                        </span>
                                      </SlotClone>
                                    </Slot>
                                  </ForwardRef>
                                </SlotClone>
                              </Slot>
                            </ForwardRef>
                          </ForwardRef>
                        </ForwardRef>
                        <ForwardRef
                          className="tooltip tooltipDarkMode"
                        >
                          <Presence
                            present={false}
                          />
                        </ForwardRef>
                      </TooltipProvider>
                    </PopperProvider>
                  </h>
                </R>
              </TooltipProviderProvider>
            </h>
          </Tooltip>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;
